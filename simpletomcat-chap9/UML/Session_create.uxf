<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>656</x>
      <y>136</y>
      <w>248</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>BootStrap
--
BootStrap以main()方法作为入口
创建了(Session)Manager,并设置到Context中:
context.setManager(manager);







</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>384</x>
      <y>152</y>
      <w>256</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>Tomcat入口,根据实际需求,指定Manager实现类
后续就由这个Manager类实现session操作
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>656</x>
      <y>304</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>MySessionServlet
--
doGet()
--
我自己试验的类,用于验证Session功能




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>488</x>
      <y>320</y>
      <w>120</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>Servlet入口:
获取session信息
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>936</x>
      <y>304</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpServletRequest
--
getSession()
--
获取当前Servlet对应的session




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>0</x>
      <y>200</y>
      <w>152</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>Left
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>2152</x>
      <y>216</y>
      <w>152</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>Right
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>856</x>
      <y>320</y>
      <w>96</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>100.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1208</x>
      <y>304</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpServletRequestBase
--
doGetSession()
--
获取当前Servlet对应的session的逻辑
放在Request基类中




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1136</x>
      <y>320</y>
      <w>88</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>90.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1520</x>
      <y>216</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>Manager
--
findSession(sessionId)
--
那么sessionId是怎么来的呢?我们只要看看
HttpServletRequestBase.setRequestedSessionId(String sessionId
方法就行了,注释很清楚告诉我们,
sessionId是tomcat Connector(其实是Processor)
解析客户端HTTP请求的时候,
自动解析出sessionId并赋给request对象的.
具体我们可以参考官方代码:
org.apache.catalina.connector.http10.HttpProcessor
HttpProcessor.parseHeaders()

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1408</x>
      <y>240</y>
      <w>128</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1520</x>
      <y>384</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>Manager
--
createSession()
--





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>280</x>
      <y>0</y>
      <w>152</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>这份文档主要是为了说明整个session创建的流程
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1408</x>
      <y>320</y>
      <w>128</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>140.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>656</x>
      <y>440</y>
      <w>320</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>HttpProcessor
--
parseHeaders()

HttpProcessor在解析客户端HTTP请求(HTTP Header)的时候
如果从HTTP Header中解析到有session相关内容
,比如JSESSIONID,就自动赋值给request对象





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>408</x>
      <y>488</y>
      <w>232</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>客户端如何把SESSIONID传递给tomcat:
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1504</x>
      <y>168</y>
      <w>176</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>如果sessionId存在,Mananer根据sessionId获取session对象
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1512</x>
      <y>336</y>
      <w>176</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>如果sessionId不存在,Mananer创建新的session对象
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>408</x>
      <y>672</y>
      <w>208</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Tomca如何把新创建的SESSIONID传递给客户端:
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>976</x>
      <y>656</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpResponseBase
--
finishResponse()




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>656</x>
      <y>656</y>
      <w>208</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>HttpProcessor
--
process()
--
总体来说,Tomcat把新创建的SessionID传递给客户端浏览器的步骤是这样的:
1.HttpProcessor处理来自客户端的http请求,结束servlet处理之后,
在返回Response对象给客户端之前,会判断一下request对象中是否有Session对象
如果有的话,就把这个session信息(主要是sessionid),以Cookie的形式,放到reponse header中.
浏览器接收到Cookie信息后,会存储起来不同的浏览器,存储Cookie的实现不同.



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1296</x>
      <y>656</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpResponseBase
--
sendHeaders()
--
设置response headers




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1624</x>
      <y>656</y>
      <w>208</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpRequestBase
--
getSession()




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1088</x>
      <y>464</y>
      <w>232</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>HttpRequestBase
--
setRequestedSessionId()
--
将解析出来的sessionId赋值给request对象
后续Manger会从request对象中获取sessionId



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>968</x>
      <y>472</y>
      <w>136</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>150.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>856</x>
      <y>672</y>
      <w>136</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>150.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1176</x>
      <y>672</y>
      <w>136</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>150.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1496</x>
      <y>672</y>
      <w>144</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0</additional_attributes>
  </element>
</diagram>
